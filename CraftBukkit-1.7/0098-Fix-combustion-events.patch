From e4b7056fd7d04aef9b99d2f9e4edfc8dc63e91ab Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Thu, 30 Oct 2014 00:40:07 -0400
Subject: [PATCH] Fix combustion events


diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorFireball.java b/src/main/java/net/minecraft/server/DispenseBehaviorFireball.java
index 11fbd73..62a666f 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorFireball.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorFireball.java
@@ -28,6 +28,7 @@ final class DispenseBehaviorFireball extends DispenseBehaviorItem {
         org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockX(), isourceblock.getBlockY(), isourceblock.getBlockZ());
         CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
         EntitySmallFireball entitysmallfireball = new EntitySmallFireball(world, d0, d1, d2, d3, d4, d5);
+        entitysmallfireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((TileEntityDispenser) isourceblock.getTileEntity());
 
         BlockDispenseEntityEvent event = new BlockDispenseEntityEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d3, d4, d5), entitysmallfireball.getBukkitEntity());
         if (!BlockDispenser.eventFired) {
@@ -50,7 +51,6 @@ final class DispenseBehaviorFireball extends DispenseBehaviorItem {
             }
         }
 
-        entitysmallfireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((TileEntityDispenser) isourceblock.getTileEntity());
         entitysmallfireball.setDirection(event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
 
         world.addEntity(entitysmallfireball);
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 183c0d6..2e2c3a3 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -15,6 +15,8 @@ import org.bukkit.entity.Hanging;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Painting;
 import org.bukkit.entity.Vehicle;
+import org.bukkit.event.entity.EntityExtinguishEvent;
+import org.bukkit.event.entity.EntityCombustByBlockEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityDespawnInVoidEvent;
 import org.bukkit.event.hanging.HangingBreakByEntityEvent;
@@ -90,6 +92,7 @@ public abstract class Entity {
     public int ticksLived;
     public int maxFireTicks;
     public int fireTicks; // CraftBukkit - private -> public
+    public boolean wasOnFire; // CraftBukkit - to detect when the fire goes out
     protected boolean inWater;
     public int noDamageTicks;
     private boolean justCreated;
@@ -349,24 +352,25 @@ public abstract class Entity {
 
     protected void E() {
         if (!this.fireProof) {
-            this.damageEntity(DamageSource.LAVA, 4);
-
             // CraftBukkit start - Fallen in lava TODO: this event spams!
+            Vec3D lavaPos = this.world.getLargestBlockIntersection(this.boundingBox.shrink(0.001D, 0.001D, 0.001D), Material.LAVA);
+            org.bukkit.block.Block lavaBlock = lavaPos == null ? null : this.world.getWorld().getBlockAt((int) lavaPos.a, (int) lavaPos.b, (int) lavaPos.c);
+            try {
+                CraftEventFactory.blockDamage = lavaBlock;
+                this.damageEntity(DamageSource.LAVA, 4);
+            } finally {
+                CraftEventFactory.blockDamage = null;
+            }
+
             if (this instanceof EntityLiving) {
-                if (this.fireTicks <= 0) {
-                    // not on fire yet
-                    // TODO: shouldn't be sending null for the block.
-                    org.bukkit.block.Block damager = null; // ((WorldServer) this.l).getWorld().getBlockAt(i, j, k);
-                    org.bukkit.entity.Entity damagee = this.getBukkitEntity();
-                    EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(damager, damagee, 15);
-                    this.world.getServer().getPluginManager().callEvent(combustEvent);
-
-                    if (!combustEvent.isCancelled()) {
-                        this.setOnFire(combustEvent.getDuration());
-                    }
-                } else {
-                    // This will be called every single tick the entity is in lava, so don't throw an event
-                    this.setOnFire(15);
+                // Note that in order for cancelling or custom duration to work properly,
+                // this event must be fired every tick, thus we cannot avoid "spamming" it.
+                org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+                EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(lavaBlock, damagee, 15);
+                this.world.getServer().getPluginManager().callEvent(combustEvent);
+
+                if (!combustEvent.isCancelled()) {
+                    this.setOnFire(combustEvent.getDuration());
                 }
                 return;
             }
@@ -700,22 +704,34 @@ public abstract class Entity {
             // CraftBukkit end
             boolean flag2 = this.L();
 
-            if (this.world.e(this.boundingBox.shrink(0.001D, 0.001D, 0.001D))) {
-                this.burn(1);
-                if (!flag2) {
-                    ++this.fireTicks;
-                    // CraftBukkit start - Not on fire yet
-                    if (this.fireTicks <= 0) { // Only throw events on the first combust, otherwise it spams
-                        EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 8);
-                        this.world.getServer().getPluginManager().callEvent(event);
+            // CraftBukkit start - get the location of the fire block
+            Vec3D firePos = this.world.getLargestBlockIntersection(this.boundingBox.shrink(0.001D, 0.001D, 0.001D), Material.FIRE);
+            if (firePos != null) {
+                org.bukkit.block.Block fireBlock = this.bukkitEntity.getWorld().getBlockAt((int) firePos.a, (int) firePos.b, (int) firePos.c);
+                try {
+                    CraftEventFactory.blockDamage = fireBlock;
+                    this.burn(1);
+                } finally {
+                    CraftEventFactory.blockDamage = null;
+                }
 
-                        if (!event.isCancelled()) {
+                if (!flag2) {
+                    EntityCombustByBlockEvent event = new EntityCombustByBlockEvent(fireBlock, this.getBukkitEntity(), 8);
+                    this.world.getServer().getPluginManager().callEvent(event);
+
+                    if (!event.isCancelled()) {
+                        // Note carefully how this works: when fireTicks is negative, the entity is
+                        // "heating up" but not on fire yet. When fireTicks reaches 0, the entity
+                        // "ignites" and fireTicks jumps to 160. It will then stay at that value as
+                        // long as the player remains in fire (because the ++ below will cancel out
+                        // the -- in the entity tick). For the event cancelling to work, it has to
+                        // be fired every tick, thus we cannot avoid "spamming" it.
+                        ++this.fireTicks;
+                        if (this.fireTicks == 0) {
                             this.setOnFire(event.getDuration());
                         }
-                    } else {
-                        // CraftBukkit end
-                        this.setOnFire(8);
                     }
+            // CraftBukkit end
                 }
             } else if (this.fireTicks <= 0) {
                 this.fireTicks = -this.maxFireTicks;
@@ -726,6 +742,15 @@ public abstract class Entity {
                 this.fireTicks = -this.maxFireTicks;
             }
 
+            // CraftBukkit start
+            if(this.fireTicks > 0) {
+                this.wasOnFire = true;
+            } else if(this.wasOnFire && this.fireTicks <= 0) {
+                this.wasOnFire = false;
+                this.world.getServer().getPluginManager().callEvent(new EntityExtinguishEvent(this.getBukkitEntity()));
+            }
+            // CraftBukkit end
+
             this.world.methodProfiler.b();
         }
     }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index c561053..bbdf888 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1647,6 +1647,44 @@ public abstract class World implements IBlockAccess {
         return false;
     }
 
+    // CraftBukkit start
+    public Vec3D getLargestBlockIntersection(AxisAlignedBB aabb, Material material) {
+        int xMin = MathHelper.floor(aabb.a);
+        int xMax = MathHelper.floor(aabb.d + 1.0D);
+        int yMin = MathHelper.floor(aabb.b);
+        int yMax = MathHelper.floor(aabb.e + 1.0D);
+        int zMin = MathHelper.floor(aabb.c);
+        int zMax = MathHelper.floor(aabb.f + 1.0D);
+
+        double maxVolume = 0;
+        Vec3D block = null;
+
+        for (int x = xMin; x < xMax; ++x) {
+            for (int y = yMin; y < yMax; ++y) {
+                for (int z = zMin; z < zMax; ++z) {
+                    Block type = this.getType(x, y, z);
+                    if (material == type.getMaterial()) {
+                        AxisAlignedBB i = new AxisAlignedBB(x, x+1, y, y+1, z, z+1).a(aabb);
+                        double volume = (i.d - i.a) * (i.e - i.b) * (i.f - i.c);
+                        if(volume > maxVolume) {
+                            maxVolume = volume;
+                            if(block == null) {
+                                block = new Vec3D(x, y, z);
+                            } else {
+                                block.a = x;
+                                block.b = y;
+                                block.c = z;
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        return block;
+    }
+    // CraftBukkit end
+
     public boolean b(AxisAlignedBB axisalignedbb, Material material) {
         int i = MathHelper.floor(axisalignedbb.a);
         int j = MathHelper.floor(axisalignedbb.d + 1.0D);
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 0743c25..dd11d13 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -454,18 +454,16 @@ public class CraftEventFactory {
                 event.getEntity().setLastDamageCause(event);
             }
             return event;
-        } else if (source == DamageSource.LAVA) {
-            EntityDamageEvent event = callEvent(new EntityDamageByBlockEvent(null, entity.getBukkitEntity(), DamageCause.LAVA, modifiers, modifierFunctions));
-            if (!event.isCancelled()) {
-                event.getEntity().setLastDamageCause(event);
-            }
-            return event;
         } else if (blockDamage != null) {
             DamageCause cause = null;
             Block damager = blockDamage;
             blockDamage = null;
             if (source == DamageSource.CACTUS) {
                 cause = DamageCause.CONTACT;
+            } else if (source == DamageSource.FIRE) {
+                cause = DamageCause.FIRE;
+            } else if (source == DamageSource.LAVA) {
+                cause = DamageCause.LAVA;
             } else {
                 throw new AssertionError(String.format("Unhandled damage of %s by %s from %s", entity, damager, source.translationIndex));
             }
-- 
1.9.0

